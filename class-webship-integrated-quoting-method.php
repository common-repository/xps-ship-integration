<?php
/**
 * Description - Webship Integrated Quoting Method

@package xpsship-integration
 */

// The requires.
require_once ABSPATH . 'wp-admin/includes/plugin.php';
// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
	die;
}


/**
 * Description - Webship Integrated Quoting Method
 */
class Webship_Integrated_Quoting_Method extends WC_Shipping_Method {

	/**
	 * Constructor for the shipping class
	 *
	 * @return void
	 */
	public function __construct() {
		$this->id = 'webship';
		// Translators: Sub the clientName into the title.
		$this->method_title = esc_html( sprintf( __( '%s Integrated Quoting', 'webship' ), $GLOBALS['client_info']['clientName'] ) );
		// Translators: Sub the clientName into the description.
		$this->method_description = esc_html( sprintf( __( 'Integrated Quoting from %s', 'webship' ), $GLOBALS['client_info']['clientName'] ) );

		$this->init();

		$this->enabled = isset( $this->settings['enabled'] ) && 'yes' === $this->settings['enabled'] ? 'yes' : '';
	}

	/**
	 * Description - Admin options.
	 */
	public function admin_options() {
		$wordpress_url = isset( $_SERVER['HTTP_HOST'] ) ? filter_var( wp_unslash( $_SERVER['HTTP_HOST'] ), FILTER_SANITIZE_URL ) : '';
		$wordpress_url = esc_url_raw( urlencode( ( isset( $_SERVER['HTTPS'] ) && 'on' === $_SERVER['HTTPS'] ? 'https' : 'http' ) . "://$wordpress_url" ) );

		echo wp_kses(
			<<<EOF
							<h2>{$GLOBALS['client_info']['clientName']} Plugin</h2>
							<table class="form-table">
						EOF,
			$GLOBALS['allowed_html']
		);

		$this->generate_settings_html();

		$permalink = esc_url( admin_url( 'admin.php' ) . '?page=wc-settings&tab=integration&section=webship' );

		echo wp_kses(
			<<<EOF
								<tr>
									<td></td>
									<td><hr /></td>
								</tr>
								<tr>
									<th></th>
									<td><i>Enable and configure your ability to load orders and fulfill them from {$GLOBALS['client_info']['clientName']} on the <a href="$permalink">{$GLOBALS['client_info']['clientName']} settings page</a></i></td>
								</tr>
							</table>
						EOF,
			$GLOBALS['allowed_html']
		);
	}

	/**
	 * Init your settings.
	 *
	 * @return void
	 */
	public function init() {
		// Load the settings API.
		$this->init_form_fields();
		$this->init_settings();

		// Save settings in admin if you have any defined.
		add_action( 'woocommerce_update_options_shipping_' . $this->id, array( $this, 'process_admin_options' ) );
	}

	/**
	 * Define settings field for this shipping.
	 *
	 * @return void
	 */
	public function init_form_fields() {
		$this->form_fields = array(
			'enabled' => array(
				'title'       => esc_attr( __( 'Enable', 'webship' ) ),
				'type'        => 'checkbox',
				'description' => esc_attr( __( 'Enable Integrated Quoting', 'webship' ) ),
				'default'     => 'yes',
			),

			'apiKey'  => array(
				'title'       => esc_attr( __( 'API Key', 'webship' ) ),
				'type'        => 'text',
				// Translators: sub the clientName into the description.
				'description' => esc_html( sprintf( __( 'Your WooCommerce Integrated Quoting API Key generated by %s', 'webship' ), $GLOBALS['client_info']['clientName'] ) ),
				'default'     => '',
			),
		);

		if ( ! webship_client_has_dedicated_plugin() ) {
			$this->form_fields['url'] = array(
				// Translators: sub the clientName into the title.
				'title'       => esc_html( sprintf( __( '%s URL', 'webship' ), $GLOBALS['client_info']['clientName'] ) ),
				'type'        => 'text',
				// Translators: sub the clientName into the description.
				'description' => esc_html( sprintf( __( 'Your %s Base URL', 'webship' ), $GLOBALS['client_info']['clientName'] ) ),
				'default'     => '',
			);
		}
	}

	/**
	 * This function reaches out to Webship and returns shipping rates as specified in the Integrated Quoting settings.
	 *
	 * @param mixed $package - the package being shipped, it contains address info.
	 * @return void
	 */
	public function calculate_shipping( $package = array() ) {
		$address = array(
			'country'  => trim( $package['destination']['country'] ),
			'state'    => trim( $package['destination']['state'] ),
			'zip'      => trim( $package['destination']['postcode'] ),
			'city'     => trim( $package['destination']['city'] ),
			'address1' => trim( $package['destination']['address'] ),
			'address2' => trim( $package['destination']['address_2'] ),
		);

		$products = array();
		foreach ( $package['contents'] as $item_id => $values ) {
			$_product = $values['data'];

			$product = array(
				'name'     => $_product->get_title(),
				'length'   => $_product->get_length(),
				'width'    => $_product->get_width(),
				'height'   => $_product->get_height(),
				'weight'   => $_product->get_weight(),
				'quantity' => $values['quantity'],
			);

			$products[] = $product;
		}

		$weight_unit = get_option( 'woocommerce_weight_unit' );
		$dim_unit    = get_option( 'woocommerce_dimension_unit' );

		if ( 'lbs' === $weight_unit ) {
			$weight_unit = 'lb';
		}

		$url = webship_client_has_dedicated_plugin() ? $GLOBALS['client_info']['clientUrl'] : $this->settings['url'];

		$response = wp_remote_post(
			"$url/{$GLOBALS['client_info']['buildNumber']}/api/v3/integratedQuotingGeneral",
			array(
				'timeout' => 45,
				'body'    => json_encode(
					array(
						'address'             => $address,
						'products'            => $products,
						'apiKey'              => trim( $this->settings['apiKey'] ),
						'currency'            => get_woocommerce_currency(),
						'weightUnit'          => $weight_unit,
						'dimUnit'             => $dim_unit,
						'pluginVersionNumber' => '2.0.9',
					)
				),
			)
		);

		/*
		WP_Error Object
		(
			[errors] => Array
				(
					[http_request_failed] => Array
						(
							[0] => A valid URL was not provided.
						)

				)

			[error_data] => Array
				(
				)

		)
		*/
		if ( gettype( $response ) === 'object' ) {
			$logger = new WC_Logger();
			$logger->add( $GLOBALS['client_info']['clientCode'], json_encode( $response ) );
		} elseif ( substr( $response['response']['code'], 0, 1 ) !== '2' ) { // 2XX || or content type !== 'application/json'
			$logger = new WC_Logger();
			$logger->add( $GLOBALS['client_info']['clientCode'], $response['response']['message'] );
		} else {
			$response_body_json = wp_remote_retrieve_body( $response );

			$response_body = json_decode( $response_body_json, true );

			$quotes = $response_body['quotes'];

			if ( $quotes && count( $quotes ) > 0 ) {
				foreach ( $quotes as $quote ) {
					$this->add_rate(
						array(
							'id'    => $quote['serviceType'],
							'label' => $quote['serviceName'],
							'cost'  => $quote['totalPrice'],
						)
					);
				}
			}
		}
	}
}
